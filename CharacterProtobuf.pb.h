// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharacterProtobuf.proto

#ifndef PROTOBUF_CharacterProtobuf_2eproto__INCLUDED
#define PROTOBUF_CharacterProtobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CharacterProtobuf_2eproto();
void protobuf_AssignDesc_CharacterProtobuf_2eproto();
void protobuf_ShutdownFile_CharacterProtobuf_2eproto();

class Character;
class CharacterList;

enum Character_Type {
  Character_Type_AI = 3,
  Character_Type_Playable = 4
};
bool Character_Type_IsValid(int value);
const Character_Type Character_Type_Type_MIN = Character_Type_AI;
const Character_Type Character_Type_Type_MAX = Character_Type_Playable;
const int Character_Type_Type_ARRAYSIZE = Character_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Character_Type_descriptor();
inline const ::std::string& Character_Type_Name(Character_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Character_Type_descriptor(), value);
}
inline bool Character_Type_Parse(
    const ::std::string& name, Character_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Character_Type>(
    Character_Type_descriptor(), name, value);
}
// ===================================================================

class Character : public ::google::protobuf::Message {
 public:
  Character();
  virtual ~Character();

  Character(const Character& from);

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Character& default_instance();

  void Swap(Character* other);

  // implements Message ----------------------------------------------

  Character* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Character& from);
  void MergeFrom(const Character& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Character_Type Type;
  static const Type AI = Character_Type_AI;
  static const Type Playable = Character_Type_Playable;
  static inline bool Type_IsValid(int value) {
    return Character_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Character_Type_Type_MIN;
  static const Type Type_MAX =
    Character_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Character_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Character_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Character_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Character_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .Character.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Character_Type type() const;
  inline void set_type(::Character_Type value);

  // @@protoc_insertion_point(class_scope:Character)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharacterProtobuf_2eproto();
  friend void protobuf_AssignDesc_CharacterProtobuf_2eproto();
  friend void protobuf_ShutdownFile_CharacterProtobuf_2eproto();

  void InitAsDefaultInstance();
  static Character* default_instance_;
};
// -------------------------------------------------------------------

class CharacterList : public ::google::protobuf::Message {
 public:
  CharacterList();
  virtual ~CharacterList();

  CharacterList(const CharacterList& from);

  inline CharacterList& operator=(const CharacterList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterList& default_instance();

  void Swap(CharacterList* other);

  // implements Message ----------------------------------------------

  CharacterList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharacterList& from);
  void MergeFrom(const CharacterList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Character character = 5;
  inline int character_size() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 5;
  inline const ::Character& character(int index) const;
  inline ::Character* mutable_character(int index);
  inline ::Character* add_character();
  inline const ::google::protobuf::RepeatedPtrField< ::Character >&
      character() const;
  inline ::google::protobuf::RepeatedPtrField< ::Character >*
      mutable_character();

  // @@protoc_insertion_point(class_scope:CharacterList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Character > character_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharacterProtobuf_2eproto();
  friend void protobuf_AssignDesc_CharacterProtobuf_2eproto();
  friend void protobuf_ShutdownFile_CharacterProtobuf_2eproto();

  void InitAsDefaultInstance();
  static CharacterList* default_instance_;
};
// ===================================================================


// ===================================================================

// Character

// required string name = 1;
inline bool Character::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Character::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Character::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Character::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Character::name() const {
  return *name_;
}
inline void Character::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Character::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Character::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Character::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Character::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Character::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Character.Type type = 2;
inline bool Character::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Character::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Character::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Character::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::Character_Type Character::type() const {
  return static_cast< ::Character_Type >(type_);
}
inline void Character::set_type(::Character_Type value) {
  assert(::Character_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CharacterList

// repeated .Character character = 5;
inline int CharacterList::character_size() const {
  return character_.size();
}
inline void CharacterList::clear_character() {
  character_.Clear();
}
inline const ::Character& CharacterList::character(int index) const {
  return character_.Get(index);
}
inline ::Character* CharacterList::mutable_character(int index) {
  return character_.Mutable(index);
}
inline ::Character* CharacterList::add_character() {
  return character_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Character >&
CharacterList::character() const {
  return character_;
}
inline ::google::protobuf::RepeatedPtrField< ::Character >*
CharacterList::mutable_character() {
  return &character_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Character_Type>() {
  return ::Character_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CharacterProtobuf_2eproto__INCLUDED
